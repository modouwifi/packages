diff --git a/libavutil/libm.h b/libavutil/libm.h
index 28d5df8..5183a46 100644
--- a/libavutil/libm.h
+++ b/libavutil/libm.h
@@ -84,12 +84,7 @@ static av_always_inline float cbrtf(float x)
 
 #if !HAVE_FMINF
 #undef fminf
-static av_always_inline av_const float fminf(float x, float y)
-{
-    //Note, the NaN special case is needed for C spec compliance, it should be
-    //optimized away if the users compiler is configured to assume no NaN
-    return x > y ? y : (x == x ? x : y);
-}
+#define fminf(x, y)    ((float)((x) > (y) ? (y) : ((x) == (x) ? (x) : (y))))
 #endif
 
 #if !HAVE_ISINF
@@ -155,10 +150,8 @@ static inline double rint(double x)
 #endif /* HAVE_RINT */
 
 #if !HAVE_LRINT
-static av_always_inline av_const long int lrint(double x)
-{
-    return rint(x);
-}
+#undef lrint
+#define lrint(x)  ((long int)(rint(x)))
 #endif /* HAVE_LRINT */
 
 #if !HAVE_LRINTF
@@ -169,31 +162,23 @@ static av_always_inline av_const long int lrintf(float x)
 #endif /* HAVE_LRINTF */
 
 #if !HAVE_ROUND
-static av_always_inline av_const double round(double x)
-{
-    return (x > 0) ? floor(x + 0.5) : ceil(x - 0.5);
-}
+#undef round
+#define round(x)     ((double)((x) > 0 ? floor((x) + 0.5) : ceil((x) - 0.5)))
 #endif /* HAVE_ROUND */
 
 #if !HAVE_ROUNDF
-static av_always_inline av_const float roundf(float x)
-{
-    return (x > 0) ? floor(x + 0.5) : ceil(x - 0.5);
-}
+#undef roundf
+#define roundf(x)        ((float)((x) > 0 ? floor((x) + 0.5) : ceil((x) - 0.5)))
 #endif /* HAVE_ROUNDF */
 
 #if !HAVE_TRUNC
-static av_always_inline av_const double trunc(double x)
-{
-    return (x > 0) ? floor(x) : ceil(x);
-}
+#undef trunc
+#define trunc(x)   ((double)(((x) > 0) ? floor(x) : ceil(x)))
 #endif /* HAVE_TRUNC */
 
 #if !HAVE_TRUNCF
-static av_always_inline av_const float truncf(float x)
-{
-    return (x > 0) ? floor(x) : ceil(x);
-}
+#undef truncf
+#define truncf(x)     ((float)(((x) > 0) ? floor(x) : ceil(x)))
 #endif /* HAVE_TRUNCF */
 
 #endif /* AVUTIL_LIBM_H */
